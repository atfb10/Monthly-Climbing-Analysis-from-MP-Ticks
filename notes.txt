'''
TODO: REMAINING STEPS
1. data
    a. NOTE (1): filter out to only previous 30 days
    b. plotly graphs (generate all graphs using per user @ "once" using threading [not really parallel, but you know what you mean]) 
    c. NOTE (2): txt file with data aggregated
 2. Logging to txt file
'''

'''
Graph Ideas
- Lead Style graphed (onsight, flash, redpoint, fell/hung)
- Boulder style graphed (flash, send, attempt)
- Count of days climbing outside vs not
- Pitches by day
- crags visited
- States climbed in
- Total feet climbed
- Feet climbed by day
- Word cloud taken from notes
- Histogram w/ Kernal Density Estimation plot by climbing grades. 
- Histogram w/ Kernal Density Estimation plot by bouldering grades. 
    NOTE: For two above Option 1: pass in order argument. order takes in a list of column names and displays those along the x-axis in the order. Step 1: Create a list object with order of ascending grades. Step 2: set order = to the list object
    NOTE: For two above Option 2: Go to saved url under "coding" folder titled sort column in pandas by specific order for how to do this. Function that creates a dataframe that is sorted by bouldering grade
'''

'''
Text Data Ideas (.csv -> .html) Iteration 1 = data in a text file. Iteration 2 = table in html file. Iteration 3 -> in a bootstrap styled html file.
NOTE: Utilize groupby method extensively!
- Number of feet climbed
- Hardest pitch sent
- Hardest pitch attempted
- Route climbed the most
- Boulder climbed the most
- Hardest boulder sent
- Hardest boulder climbed
- List of routes given four stars (your favorites of the month)
- List of routes given 1 star or a bomb (your least favorite climbs of the month)
- state where most pitches were climbed
- state with most days climbing at
- crag where most pitches were climbed
- crag with most days climbing at
- Longest route (by vertical feet)
- Biggest day of climbing (by vertical feet)
- likelihood (percentage) of onsighting/flashing a route of a specific grade
- Challenging: correlation table of route grades send by length, number of pitches, etc
'''

'''
how I want to do HTML file.
1. Create dataframe with all the text data: do this by 
    a) extracting the values from the dataframe. 
    b) creating a dictionary object with each key as what the category and each value as the value for that category (example 'num_feet_climbed': length_variable) 
    c. Pass that dictionary into a dataframe object
2. Write the dataframe as a .html (iteration 2 = done)
3. Write the table to a pre-styled html file, and then save that html file for each user
'''

'''
Future TODO:
    - Move all data cleansing and file moving functions into the User class
    - HTML Statistics table styling
    - Update plotly html files to be Dash dashboards
'''